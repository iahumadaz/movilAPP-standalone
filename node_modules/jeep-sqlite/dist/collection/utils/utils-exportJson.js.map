{"version":3,"file":"utils-exportJson.js","sourceRoot":"","sources":["../../src/utils/utils-exportJson.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from '@stencil/core';\n\nimport { JsonSQLite, JsonTable, JsonColumn, JsonIndex, JsonTrigger, JsonView, JsonProgressListener } from '../interfaces/interfaces';\nimport { UtilsSQLite } from './utils-sqlite';\nimport { UtilsJSON } from './utils-json';\n\nexport class UtilsExportJSON {\n\n  static async createExportObject(db: any, sqlObj: JsonSQLite,\n    exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonSQLite> {\n    const retObj: JsonSQLite = {} as JsonSQLite;\n    let tables: JsonTable[] = [];\n    let views: JsonView[] = [];\n    let errmsg = '';\n    try {\n      // get View's name\n      views = await UtilsExportJSON.getViewsName(db);\n\n      // get Table's name\n      const resTables: any[] = await UtilsExportJSON.getTablesNameSQL(db);\n      if (resTables.length === 0) {\n        return Promise.reject(\n          new Error(\"createExportObject: table's names failed\"));\n      } else {\n        const isTable = await UtilsSQLite.isTableExists(db, 'sync_table');\n        if(!isTable && sqlObj.mode === 'partial') {\n          return Promise.reject(new Error('No sync_table available'));\n        }\n\n        switch (sqlObj.mode) {\n          case 'partial': {\n            tables = await UtilsExportJSON.getTablesPartial(db, resTables, exportProgress);\n            break;\n          }\n          case 'full': {\n            tables = await UtilsExportJSON.getTablesFull(db, resTables, exportProgress);\n            break;\n          }\n          default: {\n            errmsg =\n              'createExportObject: expMode ' + sqlObj.mode + ' not defined';\n            break;\n          }\n        }\n        if (errmsg.length > 0) {\n          return Promise.reject(new Error(errmsg));\n        }\n        if (tables.length > 0) {\n          retObj.database = sqlObj.database;\n          retObj.version = sqlObj.version;\n          retObj.encrypted = sqlObj.encrypted;\n          retObj.mode = sqlObj.mode;\n          retObj.tables = tables;\n          if (views.length > 0) {\n            retObj.views = views;\n          }\n\n        }\n        return Promise.resolve(retObj);\n      }\n    } catch (err) {\n      return Promise.reject(new Error('createExportObject: ' + err.message));\n    }\n  }\n\n  static async getViewsName(mDb: any): Promise<JsonView[]> {\n    const views: JsonView[] = [];\n    let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\n    sql += \"type='view' AND name NOT LIKE 'sqlite_%';\";\n    let retQuery: any[] = [];\n    try {\n      retQuery = await UtilsSQLite.queryAll(mDb, sql, []);\n      for (const query of retQuery) {\n        const view: JsonView = {} as JsonView;\n        view.name = query.name;\n        view.value = query.sql.substring(query.sql.indexOf('AS ') + 3);\n        views.push(view);\n      }\n      return Promise.resolve(views);\n    } catch (err) {\n      return Promise.reject(new Error(`getViewsName: ${err.message}`));\n    }\n  }\n\n  static async getTablesFull(db: any, resTables: any[],\n    exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonTable[]> {\n    const tables: JsonTable[] = [];\n    let errmsg = '';\n    try {\n      // Loop through the tables\n      for (const rTable of resTables) {\n        let tableName: string;\n        let sqlStmt: string;\n\n        if (rTable.name) {\n          tableName = rTable.name;\n        } else {\n          errmsg = 'GetTablesFull: no name';\n          break;\n        }\n        if (rTable.sql) {\n          sqlStmt = rTable.sql;\n        } else {\n          errmsg = 'GetTablesFull: no sql';\n          break;\n        }\n        const table: JsonTable = {} as JsonTable;\n        // create Table's Schema\n        const schema: JsonColumn[] = await UtilsExportJSON.getSchema(sqlStmt/*, tableName*/);\n        if (schema.length === 0) {\n          errmsg = 'GetTablesFull: no Schema returned';\n          break;\n        }\n        // check schema validity\n        await UtilsJSON.checkSchemaValidity(schema);\n        // create Table's indexes if any\n        const indexes: JsonIndex[] = await UtilsExportJSON.getIndexes(db, tableName);\n        if (indexes.length > 0) {\n          // check indexes validity\n          await UtilsJSON.checkIndexesValidity(indexes);\n        }\n        // create Table's triggers if any\n        const triggers: JsonTrigger[] = await UtilsExportJSON.getTriggers(db, tableName);\n        if (triggers.length > 0) {\n          // check triggers validity\n          await UtilsJSON.checkTriggersValidity(triggers);\n        }\n        let msg: string = `Full: Table ${tableName} schema export completed ...`\n        exportProgress.emit({progress: msg});\n        // create Table's Data\n        const query = `SELECT * FROM ${tableName};`;\n        const values: any[] = await UtilsJSON.getValues(db, query, tableName);\n        table.name = tableName;\n        if (schema.length > 0) {\n          table.schema = schema;\n        } else {\n          errmsg = `GetTablesFull: must contain schema`;\n          break;\n        }\n        if (indexes.length > 0) {\n          table.indexes = indexes;\n        }\n        if (triggers.length > 0) {\n          table.triggers = triggers;\n        }\n        if (values.length > 0) {\n          table.values = values;\n        }\n        if (Object.keys(table).length <= 1) {\n          errmsg = `GetTablesFull: table ${tableName} is not a jsonTable`;\n          break;\n        }\n        msg = `Full: Table ${tableName} table data export completed ...`\n        exportProgress.emit({progress: msg});\n\n        tables.push(table);\n      }\n      if (errmsg.length > 0) {\n        return Promise.reject(new Error(errmsg));\n      }\n      return Promise.resolve(tables);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTablesFull: ${err.message}`));\n    }\n  }\n  static async getSchema(sqlStmt: string/*, tableName: string*/): Promise<JsonColumn[]> {\n    const schema: JsonColumn[] = [];\n    // take the substring between parenthesis\n    const openPar: number = sqlStmt.indexOf('(');\n    const closePar: number = sqlStmt.lastIndexOf(')');\n    let sstr: string = sqlStmt.substring(openPar + 1, closePar);\n    // check if there is other parenthesis and replace the ',' by '§'\n    try {\n      sstr = await UtilsExportJSON.modEmbeddedParentheses(sstr);\n      const sch: string[]  = sstr.split(\",\");\n      // for each element of the array split the\n      // first word as key\n      for (let j: number = 0; j < sch.length; j++) {\n        let row: string[] = [];\n        const scht: string = sch[j].replace(/\\n/g,\"\").trim();\n        row[0] = scht.substring(0, scht.indexOf(\" \"));\n        row[1] = scht.substring(scht.indexOf(\" \") + 1);\n\n        const jsonRow: JsonColumn = {} as JsonColumn;\n        if (row[0].toUpperCase() === \"FOREIGN\") {\n          const oPar: number = scht.indexOf(\"(\");\n          const cPar: number = scht.indexOf(\")\");\n          const fk = scht.substring(oPar + 1, cPar);\n          const fknames: string[] = fk.split('§');\n          row[0] = fknames.join(',');\n          row[0] = row[0].replace(/, /g,\",\")\n          row[1] = scht.substring(cPar + 2);\n          jsonRow['foreignkey'] = row[0];\n        } else if (row[0].toUpperCase() === \"PRIMARY\") {\n          const oPar: number = scht.indexOf(\"(\");\n          const cPar: number = scht.indexOf(\")\");\n          const pk: string = scht.substring(oPar + 1, cPar);\n          const pknames: string[] = pk.split('§');\n          row[0] = \"CPK_\" + pknames.join('_');\n          row[0] = row[0].replace(/_ /g,\"_\")\n          row[1] = scht;\n          jsonRow['constraint'] = row[0];\n        } else if (row[0].toUpperCase() === \"CONSTRAINT\") {\n          let tRow: string[] = [];\n          const row1t: string = row[1].trim();\n          tRow[0] = row1t.substring(0, row1t.indexOf(\" \"));\n          tRow[1] = row1t.substring(row1t.indexOf(\" \") + 1);\n          row[0] = tRow[0];\n          jsonRow['constraint'] = row[0];\n          row[1] = tRow[1];\n        } else {\n          jsonRow['column'] =row[0];\n        }\n        jsonRow['value'] = row[1].replace(/§/g, \",\");\n        schema.push(jsonRow);\n      }\n      return Promise.resolve(schema);\n    } catch (err) {\n      return Promise.reject(new Error(err.message));\n    }\n  }\n  static async getIndexes(db: any, tableName: string): Promise<JsonIndex[]> {\n    const indexes: JsonIndex[] = [];\n    let errmsg = '';\n    try {\n      let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\n      stmt += `type = 'index' AND tbl_name = '${tableName}' `;\n      stmt += `AND sql NOTNULL;`;\n      const retIndexes = await UtilsSQLite.queryAll(db, stmt, []);\n      if (retIndexes.length > 0) {\n        for (const rIndex of retIndexes) {\n          const keys: string[] = Object.keys(rIndex);\n          if (keys.length === 3) {\n            if (rIndex['tbl_name'] === tableName) {\n              const sql: string = rIndex['sql'];\n              const mode: string = sql.includes('UNIQUE') ? 'UNIQUE' : '';\n              const oPar: number = sql.lastIndexOf('(');\n              const cPar: number = sql.lastIndexOf(')');\n              const index: JsonIndex = {} as JsonIndex;\n              index.name = rIndex['name'];\n              index.value = sql.slice(oPar + 1, cPar);\n              if (mode.length > 0) index.mode = mode;\n              indexes.push(index);\n            } else {\n              errmsg = `GetIndexes: Table ${tableName} doesn't match`;\n              break;\n            }\n          } else {\n            errmsg = `GetIndexes: Table ${tableName} creating indexes`;\n            break;\n          }\n        }\n        if (errmsg.length > 0) {\n          return Promise.reject(new Error(errmsg));\n        }\n      }\n      return Promise.resolve(indexes);\n    } catch (err) {\n      return Promise.reject(new Error(`GetIndexes: ${err.message}`));\n    }\n  }\n  static async getTriggers(db: any, tableName: string): Promise<JsonTrigger[]> {\n    const triggers: JsonTrigger[] = [];\n    try {\n      let stmt = 'SELECT name,tbl_name,sql FROM sqlite_master WHERE ';\n      stmt += `type = 'trigger' AND tbl_name = '${tableName}' `;\n      stmt += `AND sql NOT NULL;`;\n      const retTriggers = await UtilsSQLite.queryAll(db, stmt, []);\n      if (retTriggers.length > 0) {\n        for (const rTrg of retTriggers) {\n          const keys: string[] = Object.keys(rTrg);\n          if (keys.length === 3) {\n            if (rTrg['tbl_name'] === tableName) {\n              const sql: string = rTrg['sql'];\n\n              const name: string = rTrg['name'];\n              let sqlArr: string[] = sql.split(name);\n              if (sqlArr.length != 2) {\n                return Promise.reject(\n                  new Error(\n                    `GetTriggers: sql split name does not return 2 values`,\n                  ),\n                );\n              }\n              if (!sqlArr[1].includes(tableName)) {\n                return Promise.reject(\n                  new Error(\n                    `GetTriggers: sql split does not contains ${tableName}`,\n                  ),\n                );\n              }\n              const timeEvent = sqlArr[1].split(tableName, 1)[0].trim();\n              sqlArr = sqlArr[1].split(timeEvent + ' ' + tableName);\n              if (sqlArr.length != 2) {\n                return Promise.reject(\n                  new Error(\n                    `GetTriggers: sql split tableName does not return 2 values`,\n                  ),\n                );\n              }\n              let condition = '';\n              let logic = '';\n              if (sqlArr[1].trim().substring(0, 5).toUpperCase() !== 'BEGIN') {\n                sqlArr = sqlArr[1].trim().split('BEGIN');\n                if (sqlArr.length != 2) {\n                  return Promise.reject(\n                    new Error(\n                      `GetTriggers: sql split BEGIN does not return 2 values`,\n                    ),\n                  );\n                }\n                condition = sqlArr[0].trim();\n                logic = 'BEGIN' + sqlArr[1];\n              } else {\n                logic = sqlArr[1].trim();\n              }\n\n              const trigger: JsonTrigger = {} as JsonTrigger;\n              trigger.name = name;\n              trigger.logic = logic;\n              if (condition.length > 0) trigger.condition = condition;\n              trigger.timeevent = timeEvent;\n              triggers.push(trigger);\n            } else {\n              return Promise.reject(\n                new Error(`GetTriggers: Table ${tableName} doesn't match`),\n              );\n            }\n          } else {\n            return Promise.reject(\n              new Error(`GetTriggers: Table ${tableName} creating indexes`),\n            );\n          }\n        }\n      }\n      return Promise.resolve(triggers);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTriggers: ${err.message}`));\n    }\n  }\n  static async getTablesPartial(db: any, resTables: any[],\n    exportProgress: EventEmitter<JsonProgressListener>): Promise<JsonTable[]> {\n    const tables: JsonTable[] = [];\n    let modTables: any = {};\n    let syncDate = 0;\n    let modTablesKeys: string[] = [];\n    let errmsg = '';\n    try {\n      // Get the syncDate and the Modified Tables\n      const partialModeData: any = await UtilsExportJSON\n                              .getPartialModeData(db, resTables);\n      if (Object.keys(partialModeData).includes('syncDate')) {\n        syncDate = partialModeData.syncDate;\n      }\n      if (Object.keys(partialModeData).includes('modTables')) {\n        modTables = partialModeData.modTables;\n        modTablesKeys = Object.keys(modTables);\n      }\n      // Loop trough tables\n      for (const rTable of resTables) {\n        let tableName = '';\n        let sqlStmt = '';\n        if (rTable.name) {\n          tableName = rTable.name;\n        } else {\n          errmsg = 'GetTablesFull: no name';\n          break;\n        }\n        if (rTable.sql) {\n          sqlStmt = rTable.sql;\n        } else {\n          errmsg = 'GetTablesFull: no sql';\n          break;\n        }\n        if (\n          modTablesKeys.length == 0 ||\n          modTablesKeys.indexOf(tableName) === -1 ||\n          modTables[tableName] == 'No'\n        ) {\n          continue;\n        }\n        const table: JsonTable = {} as JsonTable;\n        let schema: JsonColumn[] = [];\n        let indexes: JsonIndex[] = [];\n        let triggers: JsonTrigger[] = [];\n        table.name = rTable;\n        if (modTables[table.name] === 'Create') {\n          // create Table's Schema\n          schema = await UtilsExportJSON.getSchema(sqlStmt/*, tableName*/);\n          if (schema.length > 0) {\n            // check schema validity\n            await UtilsJSON.checkSchemaValidity(schema);\n          }\n          // create Table's indexes if any\n          indexes = await UtilsExportJSON.getIndexes(db, tableName);\n          if (indexes.length > 0) {\n            // check indexes validity\n            await UtilsJSON.checkIndexesValidity(indexes);\n          }\n          // create Table's triggers if any\n          triggers = await UtilsExportJSON.getTriggers(db, tableName);\n          if (triggers.length > 0) {\n            // check triggers validity\n            await UtilsJSON.checkTriggersValidity(triggers);\n          }\n        }\n        let msg: string = `Partial: Table ${tableName} schema export completed ...`\n        exportProgress.emit({progress: msg});\n        // create Table's Data\n        let query = '';\n        if (modTables[tableName] === 'Create') {\n          query = `SELECT * FROM ${tableName};`;\n        } else {\n          query =\n            `SELECT * FROM ${tableName} ` +\n            `WHERE last_modified > ${syncDate};`;\n        }\n        const values: any[] = await UtilsJSON.getValues(db, query, tableName);\n\n        // check the table object validity\n        table.name = tableName;\n        if (schema.length > 0) {\n          table.schema = schema;\n        }\n        if (indexes.length > 0) {\n          table.indexes = indexes;\n        }\n        if (triggers.length > 0) {\n          table.triggers = triggers;\n        }\n        if (values.length > 0) {\n          table.values = values;\n        }\n        if (Object.keys(table).length <= 1) {\n          errmsg = `GetTablesPartial: table ${tableName} is not a jsonTable`;\n          break;\n        }\n        msg = `Partial: Table ${tableName} table data export completed ...`\n        exportProgress.emit({progress: msg});\n        tables.push(table);\n      }\n      if (errmsg.length > 0) {\n        return Promise.reject(new Error(errmsg));\n      }\n      return Promise.resolve(tables);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTablesPartial: ${err.message}`));\n    }\n  }\n  static async getPartialModeData(db: any, resTables: any[]): Promise<any> {\n    const retData: any = {};\n    try {\n      // get the synchronization date\n      const syncDate: number = await UtilsExportJSON.getSynchroDate(db);\n      if (syncDate <= 0) {\n        return Promise.reject(new Error(`GetPartialModeData: no syncDate`));\n      }\n      // get the tables which have been updated\n      // since last synchronization\n      const modTables: any = await UtilsExportJSON.getTablesModified(db, resTables, syncDate );\n      if (modTables.length <= 0) {\n        return Promise.reject(new Error(`GetPartialModeData: no modTables`));\n      }\n      retData.syncDate = syncDate;\n      retData.modTables = modTables;\n      return Promise.resolve(retData);\n    } catch (err) {\n      return Promise.reject(new Error(`GetPartialModeData: ${err.message}`));\n    }\n  }\n  static async getTablesNameSQL(db: any): Promise<any[]> {\n    let sql = 'SELECT name,sql FROM sqlite_master WHERE ';\n    sql += \"type='table' AND name NOT LIKE 'sync_table' \";\n    sql += \"AND name NOT LIKE '_temp_%' \";\n    sql += \"AND name NOT LIKE 'sqlite_%';\";\n    try {\n      const retQuery: any[] = await UtilsSQLite.queryAll(db, sql, []);\n      return Promise.resolve(retQuery);\n    } catch (err) {\n      return Promise.reject(new Error(`getTablesNamesSQL: ${err.message}`));\n    }\n  }\n  static async  getTablesModified(db: any, tables: any[], syncDate: number): Promise<any> {\n    let errmsg = '';\n    try {\n      const retModified: any = {};\n      for (const rTable of tables) {\n        let mode: string;\n        // get total count of the table\n        let stmt = 'SELECT count(*) AS tcount  ';\n        stmt += `FROM ${rTable.name};`;\n        let retQuery: any[] = await UtilsSQLite.queryAll(db, stmt, []);\n        if (retQuery.length != 1) {\n          errmsg = 'GetTableModified: total ' + 'count not returned';\n          break;\n        }\n        const totalCount: number = retQuery[0]['tcount'];\n        // get total count of modified since last sync\n        stmt = 'SELECT count(*) AS mcount FROM ';\n        stmt += `${rTable.name} WHERE last_modified > `;\n        stmt += `${syncDate};`;\n        retQuery = await UtilsSQLite.queryAll(db, stmt, []);\n        if (retQuery.length != 1) break;\n        const totalModifiedCount: number = retQuery[0]['mcount'];\n\n        if (totalModifiedCount === 0) {\n          mode = 'No';\n        } else if (totalCount === totalModifiedCount) {\n          mode = 'Create';\n        } else {\n          mode = 'Modified';\n        }\n        const key: string = rTable.name;\n        retModified[key] = mode;\n      }\n      if (errmsg.length > 0) {\n        return Promise.reject(new Error(errmsg));\n      }\n      return Promise.resolve(retModified);\n    } catch (err) {\n      return Promise.reject(new Error(`GetTableModified: ${err.message}`));\n    }\n  }\n  static async  getSynchroDate(db: any): Promise<number> {\n    try {\n      const stmt = `SELECT sync_date FROM sync_table WHERE id = 1;`;\n      const res = await UtilsSQLite.queryAll(db,stmt,[]);\n      return Promise.resolve(res[0][\"sync_date\"]);\n    } catch (err) {\n      const msg = `GetSynchroDate: ${err.message}`;\n      return Promise.reject(new Error(msg));\n    }\n  }\n  static async  getLastExportDate(db: any): Promise<number> {\n    try {\n      const stmt = `SELECT sync_date FROM sync_table WHERE id = 2;`;\n      const res = await UtilsSQLite.queryAll(db,stmt,[]);\n      if (res.length === 0) {\n        return Promise.resolve(-1);\n      } else {\n        return Promise.resolve(res[0][\"sync_date\"]);\n      }\n    } catch (err) {\n      const msg = `getLastExport: ${err.message}`;\n      return Promise.reject(new Error(msg));\n    }\n  }\n  static async  setLastExportDate(db: any, lastExportedDate: string): Promise<any> {\n    try {\n      const isTable = await UtilsSQLite.isTableExists(db, 'sync_table');\n      if(!isTable) {\n        return Promise.reject(new Error('setLastExportDate: No sync_table available'));\n      }\n      const sDate: number = Math.round(new Date(lastExportedDate).getTime() / 1000);\n      let stmt = \"\";\n      if( await UtilsExportJSON.getLastExportDate(db) > 0) {\n        stmt = `UPDATE sync_table SET sync_date = ${sDate} WHERE id = 2;`;\n      } else {\n        stmt =  `INSERT INTO sync_table (sync_date) VALUES (${sDate});`\n      }\n      const changes: number = await UtilsSQLite.execute(db, stmt, false);\n      if (changes < 0) {\n        return { result: false, message: 'setLastExportDate failed' };\n      } else {\n        return { result: true };\n      }\n    } catch (err) {\n      return { result: false, message: `setLastExportDate failed: ${err.message}` };\n    }\n  }\n  static async  delExportedRows(db:any): Promise<void> {\n    let lastExportDate: number;\n    try {\n      // check if synchronization table exists\n      const isTable = await UtilsSQLite.isTableExists(db, 'sync_table');\n      if(!isTable) {\n        return Promise.reject(new Error('DelExportedRows: No sync_table available'));\n      }\n      // get the last export date\n      lastExportDate = await UtilsExportJSON.getLastExportDate(db);\n      if( lastExportDate < 0) {\n        return Promise.reject(\n          new Error(\"DelExportedRows: no last exported date available\"));\n      }\n      // get the table' name list\n      const resTables: any[] = await UtilsSQLite.getTableList(db);\n      if (resTables.length === 0) {\n        return Promise.reject(\n          new Error(\"DelExportedRows: No table's names returned\"));\n      }\n      // Loop through the tables\n      for (const table of resTables) {\n        let lastId: number = -1\n        // define the delete statement\n        const delStmt = `DELETE FROM ${table}\n              WHERE sql_deleted = 1 AND last_modified < ${lastExportDate};`\n        lastId = await UtilsSQLite.run(db, delStmt, [], true, 'no');\n        if (lastId < 0) {\n          return Promise.reject(new Error('DelExportedRows: lastId < 0'));\n        }\n      }\n    } catch (err) {\n      return Promise.reject(new Error(`DelExportedRows failed: ${err.message}`));\n    }\n\n  }\n  static async modEmbeddedParentheses(sstr: string): Promise<string> {\n    const oParArray: number[] = UtilsExportJSON.indexOfChar(sstr, '(');\n    const cParArray: number[] = UtilsExportJSON.indexOfChar(sstr, ')');\n    if (oParArray.length != cParArray.length) {\n      return Promise.reject(\"ModEmbeddedParentheses: Not same number of '(' & ')'\");\n    }\n    if (oParArray.length === 0) {\n      return Promise.resolve(sstr);\n    }\n    let resStmt = sstr.substring(0, oParArray[0] - 1);\n    for (let i: number = 0; i < oParArray.length; i++) {\n      let str: string;\n      if (i < oParArray.length - 1) {\n          if (oParArray[i + 1] < cParArray[i]) {\n              str = sstr.substring(oParArray[i] - 1, cParArray[i + 1]);\n              i++;\n          } else {\n              str = sstr.substring(oParArray[i] - 1, cParArray[i]);\n          }\n      } else {\n          str = sstr.substring(oParArray[i] - 1, cParArray[i]);\n      }\n      const newS = str.replace(/,/g, \"§\");\n      resStmt += newS;\n      if (i < oParArray.length - 1) {\n          resStmt += sstr.substring(cParArray[i], oParArray[i + 1] - 1);\n      }\n    }\n    resStmt += sstr.substring(cParArray[cParArray.length - 1], sstr.length);\n    return Promise.resolve(resStmt);\n  }\n  static indexOfChar(str: string, char: string): number[] {\n    let tmpArr: string[] = [...str];\n    char = char.toLowerCase();\n    return tmpArr.reduce((results: number[], elem: string, idx: number) =>\n      elem.toLowerCase() === char ? [...results, idx] : results, []);\n  }\n}\n"]}