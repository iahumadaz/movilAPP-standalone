{"version":3,"file":"utils-upgrade.js","sourceRoot":"","sources":["../../src/utils/utils-upgrade.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,MAAM,OAAO,YAAY;EACvB,MAAM,CAAC,KAAK,CAAC,SAAS,CACE,GAAa,EACb,QAA8C,EAC9C,UAAkB,EAClB,aAAqB;IAE3C,IAAI,OAAO,GAAW,CAAC,CAAC,CAAC;IACzB,MAAM,UAAU,GAAe,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;OAClE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;OAC5B,IAAI,EAAE,CAAC;IAER,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE;MACnC,IAAI,UAAU,GAAG,UAAU,IAAI,UAAU,IAAI,aAAa,EAAE;QAC1D,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC;QACnD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;UAC3B,OAAO,OAAO,CAAC,MAAM,CAAC,iCAAiC,CAAC,CAAC;SAC1D;QACD,IAAI;UACF,uBAAuB;UACvB,MAAM,WAAW,CAAC,+BAA+B,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;UAClE,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UACzD,MAAM,YAAY,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;UAC7D,MAAM,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;UAClD,sBAAsB;UACtB,MAAM,WAAW,CAAC,+BAA+B,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;UACjE,OAAO,GAAG,CAAC,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;SAChE;QAAC,OAAO,GAAG,EAAE;UACZ,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;SAC/D;OACF;KACF;IAED,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;EAClC,CAAC;EAAA,CAAC;EAEF,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,GAAa,EAAE,UAAoB;IACvE,IAAI;MACF,MAAM,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;MAClD,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;MAE3B,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;QAClC,MAAM,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;OACtD;MACD,MAAM,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;MACnD,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;MAC5B,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAAC,OAAO,GAAG,EAAE;MACZ,MAAM,WAAW,CAAC,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;MACrD,GAAG,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;MAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,4BAA4B,GAAG,EAAE,CAAC,CAAC;KAC1D;EACH,CAAC;CACF","sourcesContent":["import { SQLiteVersionUpgrade } from '../interfaces/interfaces';\nimport { UtilsSQLite } from '../utils/utils-sqlite';\nimport { Database } from './database';\n\nexport class UtilsUpgrade {\n  static async onUpgrade(\n                          mDB: Database,\n                          vUpgDict: Record<number, SQLiteVersionUpgrade>,\n                          curVersion: number,\n                          targetVersion: number\n                        ): Promise<number> {\n    let changes: number = -1;\n    const sortedKeys: Int32Array = new Int32Array(Object.keys(vUpgDict)\n    .map(item => parseInt(item)))\n    .sort();\n\n    for (const versionKey of sortedKeys) {\n      if (versionKey > curVersion && versionKey <= targetVersion) {\n        const statements = vUpgDict[versionKey].statements;\n        if (statements.length === 0) {\n          return Promise.reject('onUpgrade: statements not given');\n        }\n        try {\n          // set Foreign Keys Off\n          await UtilsSQLite.setForeignKeyConstraintsEnabled(mDB.mDb, false);\n          const initChanges = await UtilsSQLite.dbChanges(mDB.mDb);\n          await UtilsUpgrade.executeStatementsProcess(mDB, statements);\n          await UtilsSQLite.setVersion(mDB.mDb, versionKey);\n          // set Foreign Keys On\n          await UtilsSQLite.setForeignKeyConstraintsEnabled(mDB.mDb, true);\n          changes = (await UtilsSQLite.dbChanges(mDB.mDb)) - initChanges;\n        } catch (err) {\n          return Promise.reject(new Error(`onUpgrade: ${err.message}`));\n        }\n      }\n    }\n\n    return Promise.resolve(changes);\n  };\n\n  static async executeStatementsProcess(mDB: Database, statements: string[]): Promise<void> {\n    try {\n      await UtilsSQLite.beginTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(true);\n\n      for (const statement of statements) {\n        await UtilsSQLite.execute(mDB.mDb, statement, false);\n      }\n      await UtilsSQLite.commitTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(false);\n      return Promise.resolve();\n    } catch (err) {\n      await UtilsSQLite.rollbackTransaction(mDB.mDb, true);\n      mDB.setIsTransActive(false);\n      return Promise.reject(`ExecuteStatementProcess: ${err}`);\n    }\n  }\n}\n"]}